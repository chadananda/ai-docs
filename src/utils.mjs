// src/utils.mjs

/**
 * @file utils.mjs
 *
 * A utility module containing various helper functions used throughout the tool.
 * This includes tasks like file operations, string manipulations, or data validation.
 *
 * @module utils
 *
 * @description
 * Functions in this module are reusable and aren't bound to a specific logic of the main tool.
 */

import axios from 'axios';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';

function ensureDirectoryExistence(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
}

dotenv.config();

const GPT_4_ENDPOINT = 'https://api.openai.com/v1/engines/text-davinci-004/completions';  // This can be updated based on GPT-4 engine changes

/**
 * Uses the GPT-4 API to generate a summarized version of the README content.
 *
 * @param {string} readmeContent - The content of the README file.
 * @returns {Promise<string>} - A Promise that resolves to a summarized version of the README generated by GPT-4.
 */
async function summarizeWithGPT4(readmeContent) {
    // Constructing the prompt for GPT-4 to ensure clarity in the generated summary
    const prompt = `Provide a concise machine-readable summary that explains the primary purpose and basic usage of the following documentation: "${readmeContent}"`;

    try {
        const response = await axios.post(GPT_4_ENDPOINT, {
            prompt: prompt,
            max_tokens: 300  // This limits the length of the generated summary, but can be adjusted based on requirements
        }, {
            headers: {
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            }
        });

        return response.data.choices[0].text.trim();
    } catch (error) {
        console.error("Error summarizing with GPT-4:", error);
        // This returns a generic error message, but you might want to handle it differently based on the specific use case
        return "Error generating summary.";
    }
}

/**
 * Uses the GPT-4 API to summarize a README's content.
 *
 * @param {string} readmeContent - The content of the README file.
 * @returns {Promise<string>} - The summarized content.
 */
async function summarizeReadme(readmeContent) {
 return await summarizeWithGPT4(readmeContent);
}

/**
* Saves the summarized documentation to a specified directory.
*
* @param {string} libraryName - Name of the library.
* @param {Object} summaryData - Summarized documentation data.
*/
function saveSummary(libraryName, summaryData) {
 const outputPath = path.join(process.cwd(), 'summaries', `${libraryName}.json`); // Adjust directory structure as needed
 fs.writeFileSync(outputPath, JSON.stringify(summaryData, null, 2));
 console.log(`Saved summary for ${libraryName} to ${outputPath}`);
}

/**
* Saves the detailed documentation index to a specified directory.
*
* @param {string} libraryName - Name of the library.
* @param {Object} indexData - Detailed documentation data.
*/
function saveIndex(libraryName, indexData) {
 const outputPath = path.join(process.cwd(), 'indexes', `${libraryName}.json`); // Adjust directory structure as needed
 fs.writeFileSync(outputPath, JSON.stringify(indexData, null, 2));
 console.log(`Saved index for ${libraryName} to ${outputPath}`);
}

export { summarizeWithGPT4, summarizeReadme, saveSummary, saveIndex };
